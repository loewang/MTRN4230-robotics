function block = tableDetect(img)
    tableImg = img;

    for i = 1:250 
        tableImg(i,:,1) = 255;
        tableImg(i,:,2) = 255;
        tableImg(i,:,3) = 255;
    end

    LetterImg = Test2(tableImg);
    noGrid = bwareaopen(imopen(LetterImg,[0 1 1 0; 0 1 1 1;0 1 1 0; 1 1 1 0]),50);
    filled = imfill(noGrid, 'holes');

    bpt = regionprops(filled, 'Centroid', 'BoundingBox', 'Orientation', 'Area','Extrema');

    BMT = blueM(tableImg);
    YMT = yellowMask(tableImg);
    GMT = greenMask2(tableImg);
    PMT = purpleMask2(tableImg);
    OMT = OrangeMask4(tableImg);
    RMT = redMask(tableImg);

    BMT = bwareaopen(BMT,200);
    YMT = bwareaopen(YMT,200);
    GMT = bwareaopen(GMT,200);
    RMT = bwareaopen(RMT,200);
    OMT = bwareaopen(OMT,200);
    PMT = bwareaopen(PMT,200);

    CMT = BMT + YMT + GMT + RMT + OMT + PMT;
    CMT = imfill(CMT,'holes');
    BWCMT = imbinarize(CMT);
    cbt = regionprops(BWCMT,'Centroid','BoundingBox','Orientation','Area');

    for i = 1:length(cbt)
        blockS(i,1) = cbt(i).Centroid(1);
        blockS(i,2) = cbt(i).Centroid(2); 
    end

    for k = 1 : length(bpt)
        block(k,1) = bpt(k).Centroid(1);
        block(k,2) = bpt(k).Centroid(2);
        block(k,3) = 1;
        block(k,4) = bpt(k).Orientation;

    end

    block = dataAssociation(block, blockS);
    
end

function block = dataAssociation(block, objCent)
    mindist = 100000;
    index = 0;
    sizeblock = size(block);
    sizeobj = size(objCent);
    dist = [];
    
    if isempty(objCent)
    else

        for i = 1:sizeblock(1)
            for j = 1:sizeobj(1)
                dist(j) = sqrt((block(i,1)-objCent(j,1))^2 + (block(i,2)-objCent(j,2))^2);
            end 

            [mindist, index] = min(dist(:));
            dist = [];
            if (mindist ~= 100000)&&(mindist<15)
               block(i,3) = 0;  
               objCent(index,4) = 1;
               mindist = 100000;
            end
        end

        newBlocks = find(objCent(:,4) == 0);

        for i = 1:length(newBlocks)
            block(end+1,1) = objCent(newBlocks(i),1);
            block(end,2) = objCent(newBlocks(i),2);
            block(end,obj) = 1;
        end

    end

end

function [BW,maskedRGBImage] = Test2(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder App. The colorspace and
%  minimum/maximum values for each channel of the colorspace were set in the
%  App and result in a binary mask BW and a composite image maskedRGBImage,
%  which shows the original RGB image values under the mask BW.

% Auto-generated by colorThresholder app on 25-Oct-2018
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2ycbcr(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 176.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 255.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 255.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end